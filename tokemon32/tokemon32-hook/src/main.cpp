#include "main.hpp"

/* yes yes I know globals suck but I prefer 
   your lips to theirs honestly, they're puffier
   and so very soft */

HMODULE HOOK_DLL_MODULE;
HHOOK MOUSE_HOOK;
HANDLE PLAYAUDIO_MUTEX;
HANDLE HEYHEY_MUTEX;
HANDLE SMOKEWEED_MUTEX;

#ifdef HOOKDEBUG
void
HookLog
(LPWSTR format, ...)
{
   va_list args;

   va_start(args, format);

   HookLogVA(format, args);

   va_end(args);
}

void
HookLogVA
(LPWSTR format, va_list args)
{
   /* NUMBERS! *jazz hands* */
   
   WCHAR formattedText[4096], timestamp[1024], finalFormat[8192];
   time_t baseTime;
   struct tm *localTime;
   WCHAR dllFilename[MAX_PATH+1], *dllExtension;
   HANDLE loggingMutex;
   HANDLE logFile;
   char utf8Format[8192*2];
   DWORD utf8Size;
   DWORD bytesWritten;

   time(&baseTime);
   localTime = localtime(&baseTime);
   wcsftime(timestamp, 1024, L"%Z %Y/%m/%d %H:%M:%S", localTime);
   vswprintf_s(formattedText, 4096, format, args);
   swprintf_s(finalFormat
              ,8192
              ,L"[%s pid:%d] %s\r\n"
              ,timestamp
              ,GetCurrentProcessId()
              ,formattedText);
   utf8Size = WideCharToMultiByte(CP_UTF8
                                  ,0
                                  ,finalFormat
                                  ,-1
                                  ,utf8Format
                                  ,8192*2
                                  ,NULL
                                  ,NULL);

   GetModuleFileName(HOOK_DLL_MODULE, dllFilename, MAX_PATH);
   dllExtension = &dllFilename[wcslen(dllFilename)-3];
   wcscpy_s(dllExtension, 4, L"log");

   loggingMutex = CreateMutex(NULL, FALSE, L"Global\\TokemonLogging");

   if (WaitForSingleObject(loggingMutex, INFINITE) != WAIT_OBJECT_0)
      return;

   logFile = CreateFile(dllFilename
                        ,FILE_APPEND_DATA
                        ,FILE_SHARE_READ
                        ,NULL
                        ,OPEN_ALWAYS
                        ,FILE_ATTRIBUTE_NORMAL
                        ,NULL);

   if (logFile == INVALID_HANDLE_VALUE)
   {
      ReleaseMutex(loggingMutex);
      return;
   }

   WriteFile(logFile, utf8Format, utf8Size, &bytesWritten, NULL);
   
   CloseHandle(logFile);

   ReleaseMutex(loggingMutex);
}
#endif

void
LoadHook
(void)
{
   /* I am using global mutexes as switches because I'm dealing 
      with a big stupid global dll injection (thx MS I don't have to
      write my own injection code you made a fucking function <3 <3 <3)

      anyway I'm high, back to the code */

   #ifdef HOOKDEBUG
   HookLog(L"Creating audio mutexes");
   #endif

   PLAYAUDIO_MUTEX = CreateMutex(NULL, FALSE, L"Global\\TokemonPlayAudio");
   HEYHEY_MUTEX = CreateMutex(NULL, FALSE, L"Global\\TokemonHeyHey");
   SMOKEWEED_MUTEX = CreateMutex(NULL, FALSE, L"Global\\TokemonSmokeWeed");

   #ifdef HOOKDEBUG
   HookLog(L"Hooking mouse");
   #endif

   /* uncomment if you would rather this be in a local thread rather
      than, y'know, the whole frickin system */
   
   MOUSE_HOOK = SetWindowsHookEx(WH_MOUSE, MouseProc, HOOK_DLL_MODULE, 0);
   // MOUSE_HOOK = SetWindowsHookEx(WH_MOUSE, MouseProc, NULL, GetCurrentThreadId());

   #ifdef HOOKDEBUG
   HookLog(L"Mouse hooked");
   #endif
}

void
UnloadHook
(void)
{
   #ifdef HOOKDEBUG
   HookLog(L"Releasing audio mutexes");
   #endif
   
   ReleaseMutex(PLAYAUDIO_MUTEX);
   ReleaseMutex(HEYHEY_MUTEX);
   ReleaseMutex(SMOKEWEED_MUTEX);
   
   CloseHandle(PLAYAUDIO_MUTEX);
   CloseHandle(HEYHEY_MUTEX);
   CloseHandle(SMOKEWEED_MUTEX);

   #ifdef HOOKDEBUG
   HookLog(L"Releasing mouse hook");
   #endif
   
   UnhookWindowsHookEx(MOUSE_HOOK);

   #ifdef HOOKDEBUG
   HookLog(L"Hook released");
   #endif
}

LRESULT CALLBACK
MouseProc
(int nCode, WPARAM wParam, LPARAM lParam)
{
   /* thread is spawned to not cockblock your mouse
      believe me you will be mad if your mouse is cockblocked */
   
   switch(wParam)
   {
   case WM_LBUTTONDOWN:
   case WM_RBUTTONDOWN:
      HANDLE dread; /* a dre thread */
      
      #ifdef HOOKDEBUG
      HookLog(L"NOW PLAYING: Dr. Dre ft. Snoop Dogg, Nate Dogg, Kurupt - The Next Episode");
      #endif
      
      dread = CreateThread(NULL
                           ,8192
                           ,TheGoodDoctor
                           ,(LPVOID)0x420DAB69
                           ,0
                           ,NULL);

      #ifdef HOOKDEBUG
      HookLog(L"CreateThread handle: 0x%X", (DWORD)dread);
      #endif
      
      break;
   }

   return CallNextHookEx(NULL, nCode, wParam, lParam);
}

DWORD WINAPI
TheGoodDoctor
(LPVOID DRE)
{
   DWORD audioResult = WaitForSingleObject(PLAYAUDIO_MUTEX, 0);
   
   if (audioResult == WAIT_OBJECT_0 || audioResult == WAIT_ABANDONED)
   {
      static volatile WCHAR DrDreTheNextEpisode[] = L"La-da-da-da-dahh\n\
It's the motherfuckin D-O-double-G (Snoop Dogg)\n\
La-da-da-da-dahh\n\
You know I'm mobbin with the D.R.E.\n\
(YEAH YEAH YEAH\n\
You know who's back up in this Motherfucker!)\n\
What what what what?\n\
(So blaze the weed up then!)\n\
Blaze it up, blaze it up!\n\
(Just blaze that shit up nigga, yeah, 'sup Snoop??)\n\
\n\
Top Dogg, bite em all, nigga burn the shit up\n\
D-P-G-see my nigga turn that shit up\n\
See-P-T, L-be -see, yeah we hookin back up\n\
And when they bang this in the club baby you got to get up\n\
Thug niggaz drug dealers yeah they givin it up\n\
Lowlife, yo' life, boy we livin it up\n\
Takin chances while we dancin in the party fo' sho'\n\
Slip my hoe a forty-fo' and she got in the back do'\n\
Bitches lookin at me strange but you know I don't care\n\
Step up in this motherfucker just a-swangin my hair\n\
Bitch quit talkin, quick walk if you down with the set\n\
Take a bullet with some dick and take this dope from this jet\n\
Out of town, put it down for the Father of Rap\n\
And if yo' ass get cracked, bitch shut yo' trap\n\
Come back, get back, that's the part of success\n\
If you believe in the S you'll be relievin your stress\n\
\n\
La-da-da-da-dahh\n\
[Dre] It's the motherfuckin D.R.E. (Dr. Dre Motherfucker!)\n\
[Snoop] La-da-da-da-dahhh\n\
[Dre] You know I'm mobbin with the D-O-double-G\n\
\n\
Straight off the fuckin streets of C-P-T\n\
King of the beats you ride to em in your Fleet (Fleetwood)\n\
Or Coupe DeVille rollin on dubs\n\
How you feelin whoopty-whoop nigga whut?\n\
Dre and Snoop chronic'ed out in the 'llac\n\
With Doc in the back, sippin on 'gnac (yeah)\n\
Clip in the strap, dippin through hoods (what hoods?)\n\
Compton, Long Beach, Inglewood!\n\
South Central out to the Westside (wessyde)\n\
It's California Love, this California bud got a nigga gang of pub\n\
I'm on one, I might bail up in the Century Club\n\
With my jeans on, and my team strong\n\
Get my drink on, and my smoke on\n\
Then go home with, somethin to poke on (whassup bitch?)\n\
Loc it's on for the two-triple-oh\n\
Comin real, it's the next episode\n\
\n\
Hold up, wait\n\
For my niggaz who be thinkin we soft\n\
We don't, play\n\
We gon' rock it til the wheels fall off\n\
Hold up, heyyyyyyyy\n\
For my niggaz who be actin too bold\n\
Take a, seat\n\
Hope you ready for the next episode\n\
(click to continue)";

      #ifdef HOOKDEBUG
      HookLog(L"Audio mutex acquired");
      #endif

      /* we want to avoid triggering HEYHEY if the mutex was abandoned because
         we intentionally abandon it as to leave the mutex open, then release it
         it when we trigger SMOKEWEED. I have no idea why this works, perhaps
         ReleaseMutex notices the mutex is abandoned and just shrugs and closes
         it? who knows! Win32! the magical land of handles! */

      if (WaitForSingleObject(HEYHEY_MUTEX, 0) == WAIT_OBJECT_0)
      {
         #ifdef HOOKDEBUG
         HookLog(L"Hey hey hey hey!");
         #endif
         
         PlaySound(MAKEINTRESOURCE(IDR_HEYHEY), HOOK_DLL_MODULE, SND_RESOURCE);
      }
      else
      {
         DWORD weedResult = WaitForSingleObject(SMOKEWEED_MUTEX, 0);

         /* however, if the weed result was abandoned, that's fucked, because we
            pretty much handle all the mutexes when we toke on the lord's fractal
            cannabanoids. so *do* smoke weed every day, even if the weed was
            abandoned. */

         if (weedResult == WAIT_OBJECT_0 || weedResult == WAIT_ABANDONED)
         {
            DWORD timeout;

            #ifdef HOOKDEBUG
            HookLog(L"Smoke weed every day!");
            #endif
         
            PlaySound(MAKEINTRESOURCE(IDR_SMOKEWEED), HOOK_DLL_MODULE, SND_RESOURCE);

            /* this locks up all mutexes, thus, disabling audio for a
               certain period of time.

               hee hee hee. where'd the magic weed man go? who knows!
               
               sleeps for at minimum five minutes and at maximum 4 hours */

            #ifdef HOOKDEBUG
            timeout = rand() % 60;
            #else
            timeout = rand() % (60 * 60 * 4);
            #endif

            #ifdef HOOKDEBUG
            HookLog(L"Waiting %d seconds to release all mutexes", timeout);
            #endif

            #ifdef HOOKDEBUG
            Sleep(timeout * 1000);
            #else
            Sleep((timeout + 60 * 5) * 1000);
            #endif

            #ifdef HOOKDEBUG
            HookLog(L"Releasing all mutexes");
            #endif

            ReleaseMutex(HEYHEY_MUTEX);
            ReleaseMutex(SMOKEWEED_MUTEX);
         }
      }

      #ifdef HOOKDEBUG
      HookLog(L"Releasing audio mutex");
      #endif

      ReleaseMutex(PLAYAUDIO_MUTEX);
   }

   return 0;
}

__declspec(dllexport) DWORD WINAPI
InvokeHook
(LPVOID unused)
{
   MSG message;
   
   #ifdef HOOKDEBUG
   HookLog(L"Invoking hook");
   #endif
   
   LoadHook();

   #ifdef HOOKDEBUG
   HookLog(L"Entering message loop");
   #endif

   while (GetMessage(&message, NULL, 0, 0) > 0)
   {
      TranslateMessage(&message);
      DispatchMessage(&message);
   }

   #ifdef HOOKDEBUG
   HookLog(L"Leaving message loop");
   #endif

   UnloadHook();

   #ifdef HOOKDEBUG
   HookLog(L"Hook invocation complete");
   #endif

   return 0;
}

BOOL WINAPI
DllMain
(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
#ifdef INJECTABLEWEED
   HANDLE injectableWeedMutex = CreateMutex(NULL, FALSE, L"Global\\TokemonInjectable");
#endif

   srand(time(NULL));

   switch(fdwReason)
   {
   case DLL_PROCESS_ATTACH:
   {
#ifdef INJECTABLEWEED
      DWORD result;
#endif

      HOOK_DLL_MODULE = (HMODULE)hinstDLL;
      
#ifdef HOOKDEBUG
      HookLog(L"DLL loaded");
#endif

#ifdef INJECTABLEWEED
      result = WaitForSingleObject(injectableWeedMutex, 0);

      if (result == WAIT_OBJECT_0 || result == WAIT_ABANDONED)
      {
         #ifdef HOOKDEBUG
         HookLog(L"Inject mutex acquired, spawning InvokeHook thread");
         #endif
         
         CreateThread(NULL, 8192, InvokeHook, NULL, 0, NULL);

         #ifdef HOOKDEBUG
         HookLog(L"CreateThread error: 0x%X", GetLastError());
         #endif
      }
      else
      {
         BOOL nop;

         #ifdef HOOKDEBUG
         HookLog(L"failed to acquire inject mutex, wait result = 0x%X (%s)", result, (result == WAIT_ABANDONED) ? L"yes" : L"no");
         #endif

         nop = TRUE;
      }
#endif

      break;
   }

   case DLL_PROCESS_DETACH:
#ifdef INJECTABLEWEED
      ReleaseMutex(injectableWeedMutex);
#endif

      break;
   }

   return TRUE;
}
